// Code generated by MockGen. DO NOT EDIT.
// Source: rpc/client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	proto "github.com/sgzmd/f3/web/gen/go/flibuserver/proto/v1"
)

// MockClientInterface is a mock of ClientInterface interface.
type MockClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientInterfaceMockRecorder
}

// MockClientInterfaceMockRecorder is the mock recorder for MockClientInterface.
type MockClientInterfaceMockRecorder struct {
	mock *MockClientInterface
}

// NewMockClientInterface creates a new mock instance.
func NewMockClientInterface(ctrl *gomock.Controller) *MockClientInterface {
	mock := &MockClientInterface{ctrl: ctrl}
	mock.recorder = &MockClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientInterface) EXPECT() *MockClientInterfaceMockRecorder {
	return m.recorder
}

// CheckUpdates mocks base method.
func (m *MockClientInterface) CheckUpdates(in *proto.CheckUpdatesRequest) (*proto.CheckUpdatesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUpdates", in)
	ret0, _ := ret[0].(*proto.CheckUpdatesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUpdates indicates an expected call of CheckUpdates.
func (mr *MockClientInterfaceMockRecorder) CheckUpdates(in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUpdates", reflect.TypeOf((*MockClientInterface)(nil).CheckUpdates), in)
}

// GetAuthorBooks mocks base method.
func (m *MockClientInterface) GetAuthorBooks(in *proto.GetAuthorBooksRequest) (*proto.GetAuthorBooksResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorBooks", in)
	ret0, _ := ret[0].(*proto.GetAuthorBooksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorBooks indicates an expected call of GetAuthorBooks.
func (mr *MockClientInterfaceMockRecorder) GetAuthorBooks(in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorBooks", reflect.TypeOf((*MockClientInterface)(nil).GetAuthorBooks), in)
}

// GetSeriesBooks mocks base method.
func (m *MockClientInterface) GetSeriesBooks(in *proto.GetSeriesBooksRequest) (*proto.GetSeriesBooksResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSeriesBooks", in)
	ret0, _ := ret[0].(*proto.GetSeriesBooksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSeriesBooks indicates an expected call of GetSeriesBooks.
func (mr *MockClientInterfaceMockRecorder) GetSeriesBooks(in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSeriesBooks", reflect.TypeOf((*MockClientInterface)(nil).GetSeriesBooks), in)
}

// GetUserInfo mocks base method.
func (m *MockClientInterface) GetUserInfo(in *proto.GetUserInfoRequest) (*proto.GetUserInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", in)
	ret0, _ := ret[0].(*proto.GetUserInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockClientInterfaceMockRecorder) GetUserInfo(in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockClientInterface)(nil).GetUserInfo), in)
}

// GlobalSearch mocks base method.
func (m *MockClientInterface) GlobalSearch(in *proto.GlobalSearchRequest) (*proto.GlobalSearchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GlobalSearch", in)
	ret0, _ := ret[0].(*proto.GlobalSearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GlobalSearch indicates an expected call of GlobalSearch.
func (mr *MockClientInterfaceMockRecorder) GlobalSearch(in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GlobalSearch", reflect.TypeOf((*MockClientInterface)(nil).GlobalSearch), in)
}

// ListTrackedEntries mocks base method.
func (m *MockClientInterface) ListTrackedEntries(in *proto.ListTrackedEntriesRequest) (*proto.ListTrackedEntriesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTrackedEntries", in)
	ret0, _ := ret[0].(*proto.ListTrackedEntriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTrackedEntries indicates an expected call of ListTrackedEntries.
func (mr *MockClientInterfaceMockRecorder) ListTrackedEntries(in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrackedEntries", reflect.TypeOf((*MockClientInterface)(nil).ListTrackedEntries), in)
}

// ListUsers mocks base method.
func (m *MockClientInterface) ListUsers(in *proto.ListUsersRequest) (*proto.ListUsersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", in)
	ret0, _ := ret[0].(*proto.ListUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockClientInterfaceMockRecorder) ListUsers(in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockClientInterface)(nil).ListUsers), in)
}

// TrackEntry mocks base method.
func (m *MockClientInterface) TrackEntry(in *proto.TrackEntryRequest) (*proto.TrackEntryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrackEntry", in)
	ret0, _ := ret[0].(*proto.TrackEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrackEntry indicates an expected call of TrackEntry.
func (mr *MockClientInterfaceMockRecorder) TrackEntry(in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrackEntry", reflect.TypeOf((*MockClientInterface)(nil).TrackEntry), in)
}

// UntrackEntry mocks base method.
func (m *MockClientInterface) UntrackEntry(in *proto.UntrackEntryRequest) (*proto.UntrackEntryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntrackEntry", in)
	ret0, _ := ret[0].(*proto.UntrackEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntrackEntry indicates an expected call of UntrackEntry.
func (mr *MockClientInterfaceMockRecorder) UntrackEntry(in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntrackEntry", reflect.TypeOf((*MockClientInterface)(nil).UntrackEntry), in)
}
