syntax = "proto3";

option go_package = "flibustaimporter/flibuserver/proto";
option java_multiple_files = true;
option java_package = "com.sgzmd.flibustier.proto";
option java_outer_classname = "FlibustierProto";

import "google/protobuf/timestamp.proto";

package flibuserver.proto.v1;

// If changing anything, use `buf` (https://github.com/bufbuild/buf) to generate the code
// using command `buf generate` in the root of the project.
// After that, please copy generated files to the corresponding directories in the web subproject.
// One day, I'll figure out how to do it automatically.


enum EntryType {
  ENTRY_TYPE_UNSPECIFIED = 0;
  ENTRY_TYPE_SERIES = 1;
  ENTRY_TYPE_AUTHOR = 2;
  ENTRY_TYPE_BOOK = 3;
}

enum UserInfoAction {
  USER_INFO_ACTION_NO_CREATE = 0;
  USER_INFO_ACTION_CREATE = 1;
}

message UserInfo {
  string user_id = 1;
  string user_name = 2;
  int64 user_telegram_id = 3;
  string user_email = 4;
}

enum UserCreated {
  USER_CREATED_NO = 0;
  USER_CREATED_YES = 1;
}

message KvRecordKey {
  oneof key {
    string user_id = 1;
    TrackedEntryKey tracked_entry_key = 2;
  }
}

message Book {
  string book_name = 1;
  int32 book_id = 2;
  int32 order_in_sequence = 3;
}

message TrackedEntry {
  TrackedEntryKey key = 1;
  string entry_name = 2;
  int32 num_entries = 4;

  // Equals to entry_name if AUTHOR
  string entry_author = 5;
  repeated Book book = 6;

  google.protobuf.Timestamp saved = 7;
}

message TrackEntryRequest {
  TrackedEntryKey key = 1;

  // Re-track entry even if it already exists
  bool force_update = 2;
}

message UpdateRequired {
  TrackedEntry tracked_entry = 1;
  int32 new_num_entries = 2;
  repeated Book new_book = 3;
}

message CheckUpdatesRequest {
  repeated TrackedEntry tracked_entry = 1;
}

message CheckUpdatesResponse {
  repeated UpdateRequired update_required = 1;
}

message GetSeriesBooksRequest {
  int32 sequence_id = 1;
}

message GetAuthorBooksRequest {
  int32 author_id = 1;
}

message EntityBookResponse {
  int32 entity_id = 1;
  repeated Book book = 2;
  EntityName entity_name = 3;
}

message GetSeriesBooksResponse {
  EntityBookResponse entity_book_response = 1;
}

message GetAuthorBooksResponse {
  EntityBookResponse entity_book_response = 1;
}

message AuthorName {
  string first_name = 1;
  string middle_name = 2;
  string last_name = 3;
}

message EntityName {
  oneof name {
    AuthorName author_name = 1;
    string sequence_name = 2;
  }
}

message TrackedEntryKey {
  EntryType entity_type = 1;  
  int64 entity_id = 2;
  string user_id = 3;
}

message UntrackEntryRequest {
  TrackedEntryKey key = 1;
}

enum TrackEntryResult {
  TRACK_ENTRY_RESULT_UNSPECIFIED = 0;
  TRACK_ENTRY_RESULT_OK = 1;
  TRACK_ENTRY_RESULT_ALREADY_TRACKED = 2;
}

message TrackEntryResponse {
  TrackedEntryKey key = 1;
  TrackEntryResult result = 2;
}

message ListTrackedEntriesRequest {
  string user_id = 1;
}

message ListTrackedEntriesResponse {
  repeated TrackedEntry entry = 1;
}

enum UntrackEntryResult {
  UNTRACK_ENTRY_RESULT_UNSPECIFIED = 0;
  UNTRACK_ENTRY_RESULT_OK = 1;
  UNTRACK_ENTRY_RESULT_NOT_TRACKED = 2;
}
message UntrackEntryResponse {
  TrackedEntryKey key = 1;
  UntrackEntryResult result = 2;
}

// RPC-specific messages

message ListUsersRequest {}
message DeleteAllTrackedRequest {}
message DeleteAllTrackedResponse {}

message ListUsersResponse {
  repeated UserInfo user = 1;
}

message DeleteAllUsersRequest {}
message DeleteAllUsersResponse {}

message GetUserInfoRequest {
  // User ID string, constructed by the calling frontend, can be anything.
  string user_id = 1;
  int64 user_telegram_id = 2;
  optional UserInfoAction action = 3;
}

message GetUserInfoResponse {
  UserInfo user_info = 1;
  UserCreated user_created = 2;
}

message GlobalSearchRequest {
  string search_term = 1;
  EntryType entry_type_filter = 2;
}

message FoundEntry {
  EntryType entry_type = 1;
  string entry_name = 2;
  string author = 3;
  int64 entry_id = 4;
  int32 num_entities = 5;
}

message GlobalSearchResponse {
  GlobalSearchRequest original_request = 1;
  repeated FoundEntry entry = 2;
}


// Main service definition
service FlibustierService {
  rpc GlobalSearch (GlobalSearchRequest) returns (GlobalSearchResponse) {}
  rpc CheckUpdates (CheckUpdatesRequest) returns (CheckUpdatesResponse) {}
  rpc GetSeriesBooks (GetSeriesBooksRequest) returns (GetSeriesBooksResponse) {}
  rpc GetAuthorBooks (GetAuthorBooksRequest) returns (GetAuthorBooksResponse) {}

  rpc TrackEntry (TrackEntryRequest) returns (TrackEntryResponse) {}
  rpc ListTrackedEntries (ListTrackedEntriesRequest) returns (ListTrackedEntriesResponse) {}
  rpc UntrackEntry (UntrackEntryRequest) returns (UntrackEntryResponse) {}

  rpc GetUserInfo(GetUserInfoRequest) returns (GetUserInfoResponse) {}
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse) {}

  // Added for testing only. Do not use in production.
  rpc DeleteAllUsers(DeleteAllUsersRequest) returns (DeleteAllUsersResponse) {}
  rpc DeleteAllTracked(DeleteAllTrackedRequest) returns (DeleteAllTrackedResponse) {}
}
